name: Build On Demand

on:
  workflow_dispatch:
    inputs:
      targets:
        description: "Build Target(s)"
        required: false
        default: "all"

jobs:
  build-and-upload-android:
    if: |
      (github.event.inputs.targets == '' ||
      github.event.inputs.targets == 'all' ||
      contains(github.event.inputs.targets, 'android'))
    name: Generate And Upload Android Build Files
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2020.3.11f1-android-0.15.0
    env:
      DOTNET_ROOT: "/opt/unity/Editor/Data/NetCore/Sdk-2.2.107"

    steps:
      - name: Install dependencies
        run: |
          apt update && apt install sudo
          sudo apt-get install -y zip
          sudo apt-get install -y make

      - name: Activate unity
        # exit code is 1 for manual activation
        continue-on-error: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          echo "$UNITY_LICENSE" | tr -d '\r' > UnityLicenseFile.ulf
          unity-editor -nographics -logFile /dev/stdout -manualLicenseFile UnityLicenseFile.ulf -quit | echo "Activation finished"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Library
        id: cache-library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-2020.3.11-android

      - name: Generate Build
        run: |
          make android UNITY_EXECUTABLE=unity-editor
          export ANDROID_BUILD_PATH=$(ls Build/Android/*.apk | sed -e 's/Build\///')
          echo "ANDROID_BUILD_PATH=$ANDROID_BUILD_PATH" >> $GITHUB_ENV
          export ANDROID_BUILD_FILENAME=$(ls Build/Android/*.apk | sed -e 's/Build\/Android\///')
          echo "ANDROID_BUILD_FILENAME=$ANDROID_BUILD_FILENAME" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ANDROID_BUILD_FILENAME }}
          path: ./Build/${{ env.ANDROID_BUILD_PATH }}

  build-and-upload-webgl:
    if: |
      (github.event.inputs.targets == '' ||
      github.event.inputs.targets == 'all' ||
      contains(github.event.inputs.targets, 'web'))
    name: Generate And Upload WebGL Build Files
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2020.3.11f1-webgl-0.15.0
    env:
      DOTNET_ROOT: "/opt/unity/Editor/Data/NetCore/Sdk-2.2.107"

    steps:
      - name: Install dependencies
        run: |
          apt update && apt install sudo
          sudo apt-get install -y zip
          sudo apt-get install -y make

      - name: Activate unity
        # exit code is 1 for manual activation
        continue-on-error: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: |
          echo "$UNITY_LICENSE" | tr -d '\r' > UnityLicenseFile.ulf
          unity-editor -nographics -logFile /dev/stdout -manualLicenseFile UnityLicenseFile.ulf -quit | echo "Activation finished"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Library
        id: cache-library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-2020.3.11-webgl

      - name: Generate Build
        run: |
          make webgl UNITY_EXECUTABLE=unity-editor
          echo "WEB_BUILD_NAME=Web" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WEB_BUILD_NAME }}
          path: ./Build/${{ env.WEB_BUILD_NAME }}

  build-and-upload-windows-il2cpp:
    if: |
      (github.event.inputs.targets != '' &&
      github.event.inputs.targets != 'all' &&
      contains(github.event.inputs.targets, 'windows-il2cpp'))
    name: Generate And Upload Windows Build Files
    runs-on: windows-latest
    env:
      DOTNET_ROOT: "/opt/unity/Editor/Data/NetCore/Sdk-2.2.107"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.0.1

      - name: Cache Library
        id: cache-library
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-2020.3.11-windows

      # - name: Install Unity
      #   id: install_unity
      #   uses: kuler90/setup-unity@v1
      #   with:
      #     unity-version: 2020.3.11f1
      #     unity-modules: windows-il2cpp

      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: make zip sed grep

      - name: Create license file
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          echo "path = $GITHUB_WORKSPACE"
          cd "$GITHUB_WORKSPACE"
          echo $PWD
          echo "$UNITY_LICENSE" > UnityLicenseFile.ulf
          ls

      - name: Activate unity
        # exit code is 1 for manual activation
        continue-on-error: true
        shell: cmd
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EXECUTABLE: ${{ steps.install_unity.outputs.unity-path }}
        run: |
          dir
          echo "%UNITY_EXECUTABLE%"
          "%UNITY_EXECUTABLE%" -batchmode -nographics -logFile /dev/stdout -manualLicenseFile UnityLicenseFile.ulf -quit

      - name: Generate Build
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        env:
          UNITY_EXECUTABLE: ${{ steps.install_unity.outputs.unity-path }}
          CHERE_INVOKING: 1
        run: |
          export UNITY_EXECUTABLE=$(echo "$UNITY_EXECUTABLE" | sed -e 's/\\/\//g')
          echo "$UNITY_EXECUTABLE"
          echo "$PWD"
          ls
          make windows UNITY_EXECUTABLE="\"$UNITY_EXECUTABLE\""
          echo "WINDOWS_BUILD_NAME=Windows" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WINDOWS_BUILD_NAME }}
          path: ./Build/${{ env.WINDOWS_BUILD_NAME }}
